#!/usr/bin/env bash
#
# wdt: Website Deployment Tool
#
# Author: @trimclain
# License: MIT

# shellcheck disable=SC2155,SC2164
# Disabled:
# "Declare and assign separately to avoid masking return values":
#  https://www.shellcheck.net/wiki/SC2155
# "Use 'pushd ... || exit' or 'pushd ... || exit' in case pushd fails":
#  https://www.shellcheck.net/wiki/SC2164

readonly VERSION="v0.1.0"

readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly CYAN='\033[0;36m'
readonly MAGENTA='\033[0;35m'
readonly RESET='\033[0m'

pprint() {
    printf "${CYAN}[%b]:${RESET} %b\n" "$1" "$2"
}

wdt_pprint() {
    printf "${MAGENTA}[wdt]:${RESET} %b\n" "$1"
}

echo_inline() {
    echo -en "${CYAN}[$1]:${RESET} $2 "
}

confirm() {
    printf "${GREEN}%b${RESET}\n" "$1"
}

error() {
    printf "${RED}ERROR:$RESET %b\n" "$1" >&2 # use %b instead of %s to enable colors
    exit 1
}

# Don't run this script as root
[ "$EUID" -ne 0 ] || error "Running as root is not supported."

assert_non_empty() {
    if [ -z "$1" ]; then
        error "$2"
    fi
}

already_installed() {
    if command -v "$1" > /dev/null; then
        pprint "$1" "$2"
        return 0
    else
        return 1
    fi
}

SUDO_PROMPTED='false'
require_sudo_for() {
    # Check if the user will be prompted for sudo credentials
    if ! sudo -n true &> /dev/null; then
        if [[ "$SUDO_PROMPTED" == "false" ]]; then
            wdt_pprint "Please enter your password to install $1."
            SUDO_PROMPTED='true'
        fi
        if ! sudo -v; then
            error "Failed to obtain superuser privileges. Exiting."
        fi
    fi
}

apt_install_needed() {
    if ! command -v "$1" > /dev/null; then
        require_sudo_for "$1"
        # accept optional $2 for custom source of invocation
        echo_inline "${2:-$1}" "Installing $1..."
        sudo apt-get install -y "$1" &> /dev/null
        confirm "Done"
    fi
}

display_help() {
    cat << EOF
Usage:
  ${0##*/} [commands]

COMMANDS:
  -h, --help, help          display this help menu
  -v, --version, version    print current version of wdt
  i, install                install the domain
  u, uninstall              uninstall the domain
EOF
}

display_wdt_version() {
    echo "wdt $VERSION"
}

#######################################
# Install Fast Node Manager
#######################################
install_fnm() {
    if command -v node > /dev/null; then
        return 0
    fi

    # $FNM_DIR is $FNM_PATH but defined with eval "$(fnm env)"
    if command -v fnm > /dev/null && [[ -n "$FNM_DIR" ]]; then
        return 0
    fi

    apt_install_needed "curl" "nodejs"
    apt_install_needed "unzip" "nodejs"

    echo_inline "nodejs" "Installing fnm, nodejs version manager..."
    curl -fsSL https://fnm.vercel.app/install | bash &> /dev/null
    confirm "Done"

    confirm "In order to apply the changes, open a new terminal or source your shell config."
    confirm "After that launch WDT again."
    exit 0
}

#######################################
# Install NodeJS LTS
# Installation is separated into two steps:
# 1. install_fnm() installs fnm (node version manager)
# 2. install_nodejs() installs the latest LTS version of nodejs
# User has to source the shell config to proceed with step 2.
#######################################
install_nodejs() {
    already_installed "node" "NodeJS is already installed" && return 0

    echo_inline "nodejs" "Installing NodeJS LTS..."
    fnm install --lts &> /dev/null
    confirm "Done"
}

#######################################
# Install PM2 process manager
#######################################
install_pm2() {
    already_installed "pm2" "PM2 process manager is already installed" && return 0

    echo_inline "pm2" "Installing PM2, a process manager for node.js..."
    npm install --global pm2@latest &> /dev/null
    confirm "Done"
}

#######################################
# Install ExpressJS for current project
#######################################
install_expressjs() {
    if [ ! -f ./package.json ]; then
        echo_inline "npm" "Initializing npm and installing ExpressJS..."
        npm init -y > /dev/null
        npm install express &> /dev/null
        confirm "Done"
    elif [ ! -d ./node_modules/express ]; then
        echo_inline "npm" "Installing ExpressJS..."
        npm install express &> /dev/null
        confirm "Done"
    fi
}

#######################################
# Create app.js to serve the directory "public" to localhost:port
# Globals:
#   PORT
#######################################
create_appjs() {
    if [ -f ./app.js ]; then
        pprint "server" "app.js already exists"
        return 0
    fi

    local directory="public"
    local app_js_content="// app.js for hosting the directory \"$directory\" on port $PORT -- created by wdt
const express = require(\"express\")
const path = require(\"path\")

const app = express()
const port = $PORT
const directory = \"$directory\"

// express provides a built in way to serve all static files from the directory
app.use(express.static(directory));

app.listen(port, () => {
    console.log(\`Express is listening on port \${port}\`)
})
"

    echo_inline "server" "Creating app.js to serve the directory \"$directory\" to localhost:$PORT..."
    echo -e "$app_js_content" > app.js
    confirm "Done"

    # TODO: Since I want to server the public dir, maybe I should consider copying files there?
    # Or ask to make directory=cwd?
}

#######################################
# Install Uncomplicated Firewall
#######################################
install_ufw() {
    already_installed "ufw" "Uncomplicated Firewall is already installed" && return 0

    require_sudo_for "ufw"
    echo_inline "ufw" "Installing UFW, a firewall for Linux..."
    sudo apt-get install -y ufw &> /dev/null
    confirm "Done"
}

#######################################
# Configure Uncomplicated Firewall
#######################################
configure_ufw() {
    if [[ ! $(locale | grep LANG | cut -d= -f2 | cut -d_ -f1) == *"en"* ]] ||
        [[ ! $(locale | grep LANG | cut -d= -f2 | cut -d_ -f1) == *"C"* ]]; then
        # NOTE: I can't tell if ufw is active or not, e.g. german locale will have status "Inaktiv"
        pprint "ufw" "UFW is not in English. Skipping firewall configuration. Consider configuring it manually later."
        return 1
    fi

    require_sudo_for "ufw"
    if sudo ufw status | grep -q "Status: active"; then
        echo_inline "ufw" "Enabling ufw and allowing ssh (22), http (80) and https (443)..."
        sudo ufw --force enable > /dev/null
        sudo ufw allow ssh > /dev/null
        sudo ufw allow http > /dev/null
        sudo ufw allow https > /dev/null
        confirm "Done"
    else
        echo_inline "ufw" "Firewall is enabled. Allowing ssh (22), http (80) and https (443)..."
        sudo ufw allow ssh > /dev/null
        sudo ufw allow http > /dev/null
        sudo ufw allow https > /dev/null
        confirm "Done"
    fi
}

#######################################
# Install Nginx
#######################################
install_nginx() {
    already_installed "nginx" "Nginx is already installed" && return 0

    require_sudo_for "nginx"
    echo_inline "nginx" "Installing Nginx..."
    sudo apt-get install -y nginx &> /dev/null
    confirm "Done"
}

#######################################
# Create a Virtual Host Configuration File for given domain
# Globals:
#   NAME
#   PORT
#######################################
nginx_create_server_block_files() {
    require_sudo_for "nginx server configuration file for $NAME"

    # create new server block configuration file
    pprint "nginx" "Creating /etc/nginx/sites-available/$NAME with configuration to redirect to port $PORT..."
    # credit: https://pm2.keymetrics.io/docs/tutorials/pm2-nginx-production-setup
    local nginx_sites_available_file_data="# Virtual Host configuration for $NAME -- created by wdt

upstream ${NAME//./_}_nodejs_upstream {
    server 127.0.0.1:$PORT; # port your app runs on
    keepalive 64;
}

server {
    listen 80;
    listen [::]:80;
    server_name $NAME www.$NAME;

    location / {
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header Host \$host;
        proxy_set_header X-Forwarded-Proto \$scheme;

        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass \$http_upgrade;

        proxy_pass http://${NAME//./_}_nodejs_upstream/;
        proxy_redirect off;
        proxy_read_timeout 240s;
    }
}
"
    echo -e "$nginx_sites_available_file_data" | sudo tee "/etc/nginx/sites-available/$NAME" > /dev/null

    # create a symlink to sites-enabled
    pprint "nginx" "Adding a symlink from /etc/nginx/sites-enabled/$NAME to /etc/nginx/sites-available/$NAME..."
    sudo ln -s "/etc/nginx/sites-available/$NAME" /etc/nginx/sites-enabled/

    # uncomment one line in order to avoid a possible hash bucket memory problem that can arise from adding additional server names
    sudo sed -i "s|# server_names_hash_bucket_size 64;|server_names_hash_bucket_size 64;|g" /etc/nginx/nginx.conf

    # restart nginx for changes to take effect
    echo_inline "nginx" "Restarting nginx..."
    sudo systemctl reload nginx
    confirm "Done"
}

#######################################
# Create Server Block Files for a domain
# Globals:
#   NAME
#   EMAIL
#######################################
setup_ssl_with_nginx() {
    # Install certbot with nginx extension
    if ! command -v certbot > /dev/null; then
        require_sudo_for "certbot"
        echo_inline "certbot" "Installing Certbot from Let's Encrypt..."
        sudo apt-get install -y certbot &> /dev/null
        sudo apt-get install -y python3-certbot-nginx &> /dev/null
        confirm "Done"
    elif [ ! -d /usr/lib/python3/dist-packages/certbot_nginx ]; then
        # NOTE: this hardcoded path is only tested in Ubuntu
        require_sudo_for "certbot-nginx plugin"
        echo_inline "certbot" "Installing the nginx plugin for certbot..."
        sudo apt-get install -y python3-certbot-nginx &> /dev/null
        confirm "Done"
    else
        pprint "certbot" "Certbot with nginx plugin is already installed"
    fi

    # Enable SSL
    require_sudo_for "ssl certificate"
    pprint "certbot" "Installing the certificate for $NAME..."
    # NOTE: this will fail if there are no valid DNS records of the domain
    sudo certbot --nginx -d "$NAME" -d "www.$NAME" --email "$EMAIL" --agree-tos --no-eff-email --redirect &> /dev/null
    confirm "Done"
}

#######################################
# Create Server Block Files for a domain
#######################################
create_certbot_cronjob() {
    apt_install_needed "cron" "crontab"

    local tmpfile=$(mktemp)
    crontab -u "$(whoami)" -l > "$tmpfile" 2> /dev/null
    if grep -qF "certbot renew --quiet" "$tmpfile"; then
        rm -f "$tmpfile"
        pprint "crontab" "The cron job for certbot to renew the certificate already exists"
    else
        echo_inline "crontab" "Creating a cron job for certbot to renew the certificate..."
        # at 5:00 AM every day
        echo "0 5 * * * /usr/bin/certbot renew --quiet" >> "$tmpfile"
        crontab -u "$(whoami)" "$tmpfile"
        rm -f "$tmpfile"
        confirm "Done"
    fi
}

#######################################
# Install domain
# Globals:
#  NAME
#  PORT
#  ENABLE_SSL
#  EMAIL
#  SSL_CRONJOB
#######################################
install_domain() {
    # wdt_pprint "Installing domain $NAME at port $PORT with ssl: $ENABLE_SSL and email: ${EMAIL:-none}, cron: $SSL_CRONJOB"

    install_nodejs
    install_expressjs
    # NOTE: pm2 supports 'pm2 start "npm run start"', so I only need app.js for static apps
    # TODO: extend to serve non static websites
    create_appjs

    # install_ufw
    # configure_ufw

    install_nginx
    nginx_create_server_block_files
    if [[ "$ENABLE_SSL" == "true" ]]; then
        setup_ssl_with_nginx
        if [[ "$SSL_CRONJOB" == "true" ]]; then
            create_certbot_cronjob
        fi
    fi

    confirm "The setup for $NAME is complete."
    confirm "Put all your static files in folder \"public\" and use \"pm2 start app.js\" to host your website on localhost:$PORT."
}

#######################################
# Uninstall domain
# Globals:
#   NAME
#######################################
uninstall_domain() {
    # wdt_pprint "Uninstalling domain $NAME..."

    # nginx
    if [ ! -f "/etc/nginx/sites-available/$NAME" ]; then
        error "$NAME entry not found."
    fi
    echo_inline "nginx" "Deleting /etc/nginx/sites-available/$NAME... "
    sudo rm -f "/etc/nginx/sites-available/$NAME"
    confirm "Done"
    # -L check if there is a symlink, no matter broken or not
    if [ -L "/etc/nginx/sites-enabled/$NAME" ]; then
        echo_inline "nginx" "Deleting the symlink /etc/nginx/sites-enabled/$NAME... "
        sudo rm -f "/etc/nginx/sites-enabled/$NAME"
        confirm "Done"
    fi
    sudo systemctl reload nginx

    # ssl certificate
    # WARN: don't run this for fun
    if [[ $(sudo certbot certificates 2> /dev/null) == *"$NAME"* ]]; then
        echo_inline "certbot" "Deleting the SSL certificate for $NAME..."
        sudo certbot delete --cert-name "$NAME" &> /dev/null
        confirm "Done"
    fi

    # cron job
    # TODO: fix the case when there are other domains who need this job
    # delete the cron job if it exists
    # if there is no crontab, this will not error out
    # NOTE: this can help fix where in docker first created cron job deletes the
    # big info comment from the crontab
    # FIX: logname is empty in docker, but is the only reliable thing
    # when running the script in sudo
    # NOTE: this check will fail without sudo
    if [[ -f /var/spool/cron/crontabs/$(logname) ]]; then
        local tmpfile=$(mktemp)
        crontab -u "$(logname)" -l > "$tmpfile"
        if grep -qF "certbot renew --quiet" "$tmpfile"; then
            echo_inline "crontab" "Deleting the cron job for certbot to renew the certificate..."
            sed -i "/certbot renew --quiet/d" "$tmpfile"
            crontab -u "$(logname)" "$tmpfile"
            confirm "Done"
        fi
        rm -f "$tmpfile"
    fi

    confirm "The setup for $NAME was successfully deleted."
}

main() {
    case $1 in
        -h | --help | help)
            display_help
            exit 0
            ;;
        -v | --version | version)
            display_wdt_version
            exit 0
            ;;
        i | install)
            # readonly INSTALL_DOMAIN='true'
            ;;
        u | uninstall)
            readonly UNINSTALL_DOMAIN='true'
            ;;
        *)
            display_help
            exit 0
            ;;
    esac

    # this is essential for everything and is a 2 step process
    install_fnm

    read -rp "Enter domain name: " NAME
    assert_non_empty "$NAME" "Domain name is required."

    if [[ "$UNINSTALL_DOMAIN" == "true" ]]; then
        read -rp "Are you sure you want to uninstall $NAME? [y/N]: " -n 1 response
        case "$response" in
            [yY]) echo && uninstall_domain && exit 0 ;;                # force newline
            "") echo "Uninstall cancelled. Aborting." && exit 1 ;;     # pressed enter so no need to force newline
            *) echo -e "\nUninstall cancelled. Aborting." && exit 1 ;; # force newline
        esac
    fi

    read -rp "Enter port: " PORT
    assert_non_empty "$PORT" "Port is required."

    ENABLE_SSL='false'
    local ssl_response
    read -rp "Setup SSL? [y/N]: " -n 1 ssl_response
    case "$ssl_response" in
        [yY]) readonly ENABLE_SSL='true' && echo ;; # force newline
        "") ;;                                      # pressed enter so no need to force newline
        *) echo ;;                                  # force newline
    esac

    if [[ "$ENABLE_SSL" == "true" ]]; then
        read -rp "Enter email for SSL: " EMAIL
        assert_non_empty "$EMAIL" "Email is required for SSL certificate for registration and recovery contact."
    fi

    SSL_CRONJOB='false'
    if [[ "$ENABLE_SSL" == "true" ]]; then
        local ssl_cronjob_response
        read -rp "Setup cron job to automatically renew SSL certificate? [y/N]: " -n 1 ssl_cronjob_response
        case "$ssl_cronjob_response" in
            [yY]) readonly SSL_CRONJOB='true' && echo ;; # force newline
            "") ;;                                       # pressed enter so no need to force newline
            *) echo ;;                                   # force newline
        esac
    fi

    install_domain
}

main "$@"
