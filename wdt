#!/usr/bin/env bash

# Run this script as root
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"
# Since we're root now, we could delete every "sudo" in next lines.
# They are left mainly for informational purposes.

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
CC=$GREEN # Chosen Color

# Error out
die() {
    printf '%b\n' "$1" >&2 # use %b instead of %s to enable colors
    exit 1
}

# Run as sudo but extend $PATH to have npm and node available
sudop() {
    sudo -u $(logname) bash -c "PATH=$PATH:/home/$(logname)/.n/bin/; $1"
}

# Run as user
userdo() {
    sudo -u $(logname) $1
}

# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [OPTIONS...] [-n DOMNAME] [-p PORTNUM] [-e EMAIL]
Setup everything to deploy a website.

     -h, --help             display this help menu
     -n, --name DOMNAME     pass the name of the domain you want to use
     -p, --port PORTNUM     pass the port you'll host your website on
     -s, --secure           enable the ssl certificate using certbot
     -e, --email EMAIL      pass the email for the ssl certificate for registration and recovery contact
     -a, --autorenew        schedule automatic renewal of the certificate using crontab
     -d, --delete           undo everything wdt has done for a specified domain
     --purge-all            undo everything wdt has done and uninstall every software it has installed
EOF
}

# Initialize all the option variables.
# This ensures we are not contaminated by variables from the environment.
name=
port=
email=
enable_ssl=false
autorenew_ssl=false
delete_domain=false
purge_it_all=false

while :; do
    case $1 in
        -h|-\?|--help)
            show_help    # Display a usage synopsis.
            exit
            ;;
        -n|--name)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                name=$2
                shift
            else
                die "${RED}ERROR:$NC \"--name\" requires a non-empty option argument."
            fi
            ;;
        --name=?*)
            name=${1#*=} # Delete everything up to "=" and assign the remainder.
            ;;
        --name=)         # Handle the case of an empty --name=
            die "${RED}ERROR:$NC \"--name\" requires a non-empty option argument."
            ;;
        -p|--port)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                port=$2
                shift
            else
                die "${RED}ERROR:$NC \"--port\" requires a non-empty option argument."
            fi
            ;;
        --port=?*)
            port=${1#*=} # Delete everything up to "=" and assign the remainder.
            ;;
        --port=)         # Handle the case of an empty --name=
            die "${RED}ERROR:$NC \"--port\" requires a non-empty option argument."
            ;;
        -e|--email)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                email=$2
                shift
            else
                die "${RED}ERROR:$NC \"--email\" requires a non-empty option argument."
            fi
            ;;
        --email=?*)
            email=${1#*=} # Delete everything up to "=" and assign the remainder.
            ;;
        --email=)         # Handle the case of an empty --name=
            die "${RED}ERROR:$NC \"--email\" requires a non-empty option argument."
            ;;
        -s|--secure)
            enable_ssl=true
            ;;
        -a|--autorenew)
            autorenew_ssl=true
            ;;
        -d|--delete)
            delete_domain=true
            ;;
        --purge-all)
            purge_it_all=true
            ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            # printf 'WARNING\: Unknown option (ignored): %s\n' "$1" >&2
            echo -e "${RED}ERROR:$NC Invalid option -- \"$1\". Try \"wdt --help\" for more information."
            exit 1
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac
    shift # this makes $1 = $2, $2 = $3, etc...
done


# Rest of the program here.
# If there are input files (for example) that follow the options, they
# will remain in the "$@" positional parameters.
# TODO: if there's still $1, asign it to $name

if $purge_it_all; then
    read -p "Are you sure you want to purge everything wdt has done? [yes|no] " -r
    if [[ $REPLY =~ ^[Yy][Ee]?[Ss]?$ ]]; then
        # nodejs
        if [ -d /home/$(logname)/.n ]; then
            # delete all pm2 jobs
            sudop "pm2 delete all" &> /dev/null
            echo -en "$CC[nodejs]:$NC Deleting n version manager with node.js LTS... "
            rm -rf /home/$(logname)/.n
            echo "Done"
        fi
        # ufw
        if [ -f /usr/sbin/ufw ]; then
            echo -en "$CC[ufw]:$NC Disabling and deleting ufw -- the Uncomplicated Firewall... "
            sudo ufw disable &> /dev/null
            sudo apt purge ufw -y &> /dev/null
            echo "Done"
        fi
        # nginx
        if [ -f /usr/sbin/nginx ]; then
            echo -en "$CC[nginx]:$NC Deleting nginx... "
            sudo apt purge nginx nginx-common -y &> /dev/null
            # delete everything in /var/www/ except html folder
            sudo find /var/www -mindepth 1 ! -regex '^/var/www/html\(/.*\)?' -delete
            echo "Done"
        fi
        # certbot
        if [ -f /usr/bin/certbot ]; then
            # check if ssl certificate exists
            # TODO: delete all certificates (get the list of them)
            # if [[ $(sudo certbot certificates 2> /dev/null) == *"$name"* ]]; then
            #     echo -en "$CC[certbot]:$NC Deleting the SSL certificate for $name... "
            #     sudo certbot delete --cert-name $name &> /dev/null
            #     echo "Done"
            # fi
            echo -en "$CC[certbot]:$NC Deleting certbot... "
            sudo apt purge python3-certbot-nginx -y &> /dev/null
            echo "Done"
        fi
        # crontab
        # delete the cron job if it exists
        # if there is no crontab, this will not error out
        if [[ -f /var/spool/cron/crontabs/$(logname) ]]; then
            tmpfile="tmp.txt"
            crontab -u $(logname) -l > $tmpfile
            if grep -qF "certbot renew --quiet" $tmpfile; then
                echo -en "$CC[crontab]:$NC Deleting the cron job for certbot to renew the certificate... "
                sed -i "/certbot renew --quiet/d" $tmpfile
                crontab -u $(logname) $tmpfile && rm $tmpfile
                echo "Done";
            else
                rm $tmpfile
            fi
        fi

        echo -en "$CC[apt]:$NC Cleaning it up... "
        sudo apt autoremove -y &> /dev/null
        echo "Done";

        echo -e "${CYAN}The purge was successfull.$NC"
        exit
    else
        exit 0
    fi
fi

if $delete_domain; then

    if [ ! "$name" ]; then
        die "${RED}ERROR:$NC Please provide the DOMAIN to delete."
    fi

    read -p "Are you sure you want to delete $name? [y|n] " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]; then

        if [ -f /etc/nginx/sites-available/$name ]; then
            echo -en "$CC[nginx]:$NC Deleting /etc/nginx/sites-available/$name... "
            sudo rm /etc/nginx/sites-available/$name
            echo "Done"
        else
            die "${RED}ERROR:$NC $name entry not found."
        fi
        # -L check if there is a symlink, no matter broken or not
        if [ -L /etc/nginx/sites-enabled/$name ]; then
            echo -en "$CC[nginx]:$NC Deleting the symlink /etc/nginx/sites-enabled/$name... "
            sudo rm /etc/nginx/sites-enabled/$name
            echo "Done"
        fi
        if [ -d /var/www/$name ]; then
            echo -en "$CC[nginx]:$NC Deleting /var/www/$name... "
            sudo rm -r /var/www/$name
            echo "Done"
        fi
        sudo systemctl restart nginx

        # check if ssl certificate exists
        if [[ $(sudo certbot certificates 2> /dev/null) == *"$name"* ]]; then
            echo -en "$CC[certbot]:$NC Deleting the SSL certificate for $name... "
            sudo certbot delete --cert-name $name &> /dev/null
            echo "Done"
        fi

        # TODO: fix the case when there are other domains who need this job
        # delete the cron job if it exists
        # if there is no crontab, this will not error out
        if [[ -f /var/spool/cron/crontabs/$(logname) ]]; then
            tmpfile="tmp.txt"
            crontab -u $(logname) -l > $tmpfile
            if grep -qF "certbot renew --quiet" $tmpfile; then
                echo -en "$CC[crontab]:$NC Deleting the cron job for certbot to renew the certificate... "
                sed -i "/certbot renew --quiet/d" $tmpfile
                crontab -u $(logname) $tmpfile && rm $tmpfile
                echo "Done";
            else
                rm $tmpfile
            fi
        fi

        echo -e "${CYAN}The setup for $name was successfully deleted.$NC"
        exit
    else
        exit 0
    fi
fi

# if the necessary arguments are missing, error out
if [ ! "$name" ] || [ ! "$port" ]; then
    die "${RED}ERROR:$NC Please provide both the DOMAIN and the PORT. Try \"wdt --help\" for more information."
elif $enable_ssl && [ ! "$email" ]; then
    die "${RED}ERROR:$NC Please provide the EMAIL to connect to the certificate for registration and recovery contact."
fi


# NODEJS
# Install nodejs
if [ ! -d /home/$(logname)/.n ]; then
    echo -en "$CC[nodejs]:$NC Installing n version manager with node.js LTS... "
    curl -sL https://git.io/n-install | N_PREFIX=~/.n bash -s -- -q -n
    # fix the ownership problem
    sudo chown -R $(logname):$(logname) /home/$(logname)/.n
    echo "Done"
else
    echo -e "$CC[nodejs]:$NC Node is already installed"
fi

# Install pm2
if [ ! -f /home/$(logname)/.n/bin/pm2 ]; then
    echo -en "$CC[pm2]:$NC Installing pm2, a process manager for node.js... "
    # make sudo use $PATH instead of $SECURE_PATH, otherwise npm won't work
    sudop "npm install --global pm2 &> /dev/null"
    echo "Done"
else
    echo -e "$CC[pm2]:$NC PM2 process manager is already installed"
fi

# npm install part
if [ ! -f ./package.json ]; then
    echo -en "$CC[npm]:$NC Initializing npm and installing Express.js... "
    sudop "npm init -y > /dev/null"
    sudop "npm install express &> /dev/null"
    echo "Done"
elif [ ! -d ./node_modules/express ]; then
    echo -en "$CC[npm]:$NC Installing Express.js... "
    sudop "npm install express &> /dev/null"
    echo "Done"
fi

# Create app.js if it doesn't exist
if [ ! -f ./app.js ]; then
    echo -en "$CC[express]:$NC Creating app.js to serve the folder \"public\" to localhost:$port... "
    folder="public"
    app_js_content="// app.js for hosting the folder \"$folder\" on port $port -- created by wdt\nconst express = require('express')\nconst path = require('path')\n\nconst app = express()\nconst port = $port\nconst folder = \"$folder\"\n\n// express provides a built in way to serve all static files from the folder\napp.use(express.static(folder));\n\napp.listen(port, () => {\n\tconsole.log(\`Express is listening on port \${port}\`)\n})"
    userdo "touch app.js"
    echo -e $app_js_content > app.js
    echo "Done"
else
    echo -en "$CC[express]:$NC Found app.js"
fi

# UFW
# Install ufw
if [ ! -f /usr/sbin/ufw ]; then
    echo -en "$CC[ufw]:$NC Installing ufw -- the Uncomplicated Firewall... "
    sudo apt install ufw -y &> /dev/null
    echo "Done"
else
    echo -e "$CC[ufw]:$NC Uncomplicated Firewall is already installed"
fi

# check if it's german or english language to get the correct ufw status info
if [[ $(locale | grep LANG | cut -d= -f2 | cut -d_ -f1) == *"de"* ]]; then
    ufwstatus="Inaktiv"
elif [[ $(locale | grep LANG | cut -d= -f2 | cut -d_ -f1) == *"en"* ]]; then
    ufwstatus="inactive"
fi
# make sure firewall is enabled and allows ssh, http and https
if sudo ufw status | grep -qw $ufwstatus; then
    echo -en "$CC[ufw]:$NC Enabling ufw and allowing ssh (22), http (80) and https (443)... "
    sudo ufw --force enable > /dev/null
    sudo ufw allow ssh > /dev/null
    sudo ufw allow http > /dev/null
    sudo ufw allow https > /dev/null
    echo "Done"
else
    echo -en "$CC[ufw]:$NC Firewall is enabled. Allowing ssh (22), http (80) and https (443)... "
    sudo ufw allow ssh > /dev/null
    sudo ufw allow http > /dev/null
    sudo ufw allow https > /dev/null
    echo "Done"
fi

# NGINX
# Install nginx
if [ ! -f /usr/sbin/nginx ]; then
    echo -en "$CC[nginx]:$NC Installing nginx... "
    sudo apt install nginx -y &> /dev/null
    echo "Done"
else
    echo -e "$CC[nginx]:$NC Nginx is already installed"
fi

# Do the work
if [ ! -d /var/www/$name/html ]; then

    ####### optional start #######
    # This parts creates the domain folder in /var/www. This isn't necessary,
    # if the user will not store files there. This is still made to do it the
    # correct way and allow the user to change their mind and use this folder later
    #######

    # create the directories for the site
    sudo mkdir -p /var/www/$name/html
    echo -e "$CC[nginx]:$NC Creating a directory /var/www/$name/html... "
    # assing the correct ownership
    # using $(logname) allows to force run this script with sudo and still get the username
    sudo chown -R $(logname):$(logname) /var/www/$name/html
    # make permissions of our web roots are correct
    sudo chmod -R 755 /var/www
    # creating sample page for the site
    echo -e "$CC[nginx]:$NC Adding a sample index.html to /var/www/$name/html... "
    index_html_data="<!-- Created by wdt -->\n<html>\n\t<head>\n\t\t<title>Welcome to $name!</title>\n\t</head>\n\t<body>\n\t\t<h1> Success! The $name server block is working! </h1>\n\t</body>\n</html>"
    echo -e $index_html_data > /var/www/$name/html/index.html
    ####### optional end #######

    # creating Server Block Files for Each Domain
    echo -e "$CC[nginx]:$NC Creating /etc/nginx/sites-available/$name and adding the configuration to redirect to port $port... "
    nginx_sites_available_file_data="# Virtual Host configuration for $name -- created by wdt\n#\nserver {\n\tlisten 80;\n\tlisten [::]:80;\n\n\tserver_name $name www.$name;\n\n\troot /var/www/$name/html;\n\tindex index.html index.htm index.nginx-debian.html;\n\n\tlocation / {\n\t\tproxy_pass http://localhost:$port; # whatever port your app runs on\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade \$http_upgrade;\n\t\tproxy_set_header Connection 'upgrade';\n\t\tproxy_set_header Host \$host;\n\t\tproxy_cache_bypass \$http_upgrade;\n\t}\n}"
    # create new server file and correct it's permissions and ownership
    echo -e $nginx_sites_available_file_data > $name
    sudo mv $name /etc/nginx/sites-available/
    sudo chown -R root:root /etc/nginx/sites-available/$name
    sudo chmod 644 /etc/nginx/sites-available/$name
    # create a symlink to sites-enabled
    echo -e "$CC[nginx]:$NC Adding a symlink from /etc/nginx/sites-enabled/$name to /etc/nginx/sites-available/$name... "
    sudo ln -s /etc/nginx/sites-available/$name /etc/nginx/sites-enabled/
    # uncomment one line in order to avoid a possible hash bucket memory problem that can arise from adding additional server names
    sudo sed -i "s|# server_names_hash_bucket_size 64;|server_names_hash_bucket_size 64;|g" /etc/nginx/nginx.conf
    # restart nginx
    echo -en "$CC[nginx]:$NC Restarting nginx... "
    sudo systemctl restart nginx
    echo "Done"
fi

# CERTBOT
if $enable_ssl; then

    # Install certbot with nginx extension
    if [ ! -f /usr/bin/certbot ]; then
        echo -en "$CC[certbot]:$NC Installing Certbot from Let's Encrypt with the nginx plugin... "
        sudo apt install python3-certbot-nginx -y &> /dev/null
        echo "Done"
    elif [ ! -d /usr/lib/python3/dist-packages/certbot_nginx ]; then
        echo -en "$CC[certbot]:$NC Installing the nginx plugin for certbot... "
        sudo apt install python3-certbot-nginx -y &> /dev/null
        echo "Done"
    else
        echo -e "$CC[certbot]:$NC Certbot with nginx plugin is already installed"
    fi

    # Enable SSL
    echo -en "$CC[certbot]:$NC Installing the certificate for $name... "
    sudo certbot --nginx -d $name -d www.$name --email $email --agree-tos --no-eff-email --redirect &> /dev/null
    echo "Done"
fi

# CRONTAB
if $autorenew_ssl; then
    # create a tempfile
    tmpfile="tmp.txt"
    # write out current crontab
    crontab -u $(logname) -l > $tmpfile
    # check if the cron job already exists
    if grep -qF "certbot renew --quiet" $tmpfile; then
        rm $tmpfile
        echo -e "$CC[crontab]:$NC The cron job for certbot to renew the certificate already exists"
    else
        echo -en "$CC[crontab]:$NC Creating a cron job for certbot to renew the certificate... "
        # echo new cron into cron file
        echo "0 5 * * * /usr/bin/certbot renew --quiet" >> $tmpfile
        # install new cron file
        crontab -u $(logname) $tmpfile && rm $tmpfile
        echo "Done";
    fi
fi

# FINISH
echo -e "${CYAN}The setup for $name is complete.$NC"
echo -e "${CYAN}Put all your static files in folder \"public\" and use \"pm2 start app.js\" to host your website on localhost:$port.$NC"
